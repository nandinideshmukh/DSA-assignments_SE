#include <iostream>
using namespace std;

class node{
  node* next;
  node* prev ;
  int data;
  public:
  
  node(int val){
      data = val;
      next = nullptr;
      prev = nullptr;
  }
  
   node(){
      data = 0;
      next = nullptr;
      prev = nullptr;
  }
  
  node* makell(node* head){

      int n;
      cout << "Enter number of nodes you want in the list: " ;
      std::cin >> n;

      if (n <= 0) {
            cout << "Invalid number of nodes." << endl;
            return head;
        }
        if (head == nullptr) {
            cout << "Enter value for the first node: ";
            int val;
            cin >> val;
            head = new node(val);
            n--;
        }
          node* t = head;

        // while (t->next != nullptr) {
        //     t = t->next;
        // }

      for(int i =0;i<n;i++){
          int val;
          cout<<"\nEnter value you want in "<<i+1 <<" node: ";
          cin>>val;
          node* newnode = new node(val);
          t->next = newnode;
          newnode->prev = t;
          t = newnode;
      }
      return head;
  }
  void printList(node* head) {
        node* t = head;
        while (t != nullptr) {
            cout << t->data << "-> ";
            t = t->next;
        }
        cout << "nullptr\n";
    }

    node* ones(node* head){
        node* t = head;
        while(t != nullptr){
            t->data = !t->data;
            t = t->next;
        }
        return head;
    }

    node* twos(node* head){
        node* t = head;
        int carry = 1;
       
        while(t->next!=nullptr)
        t = t-> next;

        while(t!=nullptr){
            t->data = !t->data;
            if(t->data==1 && carry==1){
            t->data = 0;
            carry = 1;
            }
           
            else if(t->data==0 && carry==1 || t->data==1 && carry==0){
            t->data = 1;
            carry = 0;                
            }
            else{
                carry = 0;
            }
            t = t-> prev;
        }
        // if(carry==1){
        //     node* carry_node = new node(carry);
        //     head->prev = carry_node;
        //     carry_node->next= head;
        //     head = carry_node;
        // }
        return head;
    }
   
    node* add_2_bin(node* head1, node* head2) {
    node* t1 = head1;
    node* t2 = head2;

    // Move to the end of both lists (MSB)
    while (t1->next != nullptr) {
        t1 = t1->next;
    }
    while (t2->next != nullptr) {
        t2 = t2->next;
    }

    int carry = 0;

    while (t1 != nullptr || t2 != nullptr) {
        int sum = carry;
        
        if (t1 != nullptr) {
            sum += t1->data;
        }
        if (t2 != nullptr) {
            sum += t2->data;
        }

        int value = sum % 2;
        carry = sum / 2;

        if (t1 != nullptr) {
            t1->data = value;
            t1 = t1->prev;
        } 
        else {
            node* new_node = new node(value);
            new_node->next = head1;
            if (head1 != nullptr) {
                head1->prev = new_node;
            }
            head1 = new_node;
        }

        if (t2 != nullptr) {
            t2 = t2->prev;
        }
    }

    if (carry == 1) {
        node* carry_node = new node(carry);
        carry_node->next = head1;
        if (head1 != nullptr) {
            head1->prev = carry_node;
        }
        head1 = carry_node;
    }

    return head1;
}
};

class choice:public node{
public:

void choose(){
    int x ;

    cout<<"\nWhat operation you want to perform on doubly linked list: \n1. One's complement \n2. Two's complement \n3. Addition of binary numbers";
    cin>>x;
    node nn;
    node* head_ini = nullptr;
    node* head1 = nn.makell(head_ini);
    switch(x){
        case 1:{
            cout<<"\nLinked list is: ";
            nn.printList(head1);
            cout<<"\n One's complement of it is: ";
            node* head2 = nn.ones(head1);
            nn.printList(head2);
            break;
        }
        case 2:{
            cout<<"\nLinked list is: ";
            nn.printList(head1);
            cout<<"\n Two's complement of it is: ";
            node* head2 = nn.twos(head1);
            nn.printList(head2);
            break;
        }
        case 3:{
             node* second2 = nullptr;
             node* second = nn.makell(second2);
             node* additon = nn.add_2_bin(second,head1);
             cout<<"\nAdditon of two linked lists is: ";
             nn.printList(additon);
             break;
        }
        default:
        cout<<"\nIt should be between 1 to 3\n Try again! :)\n";
    }

}
};


int main()
{
    // node nn;
    // node* head = nullptr;
    // node* head1 = nn.makell(head);
    // cout << "\nThe doubly linked list is: ";
    // nn.printList(head1);
   
    // node* head2 =nn.ones(head1);
   
   
    // cout<<"\nOne's complement of doubly linked list is: ";
    // nn.printList(head2);
    // nn.printList(head1);
   
    // node* head3 = nn.twos(head2);

    // cout<<"\nTwo's complement of doubly linked list is: ";
    // nn.printList(head3);
    // nn.printList(head1);
   
    // node* head4 = nn.add_2_bin(head1,head3);
    // cout<<"\nAddition of two binary linked lists is: ";
    // nn.printList(head4);
    choice chosen;
    chosen.choose();

    char c;
    cout<<"\n\n Do you want to continue this process once again? \nEnter y or n: ";
    cin>>c;
    if(c=='y')
    chosen.choose();
    else
    return 0;
}
