/******************************************************************************
 * 
In any language program mostly syntax error occurs due to unbalancing
delimiter such as (), {}, []. Write C++ program using stack to check
whether given expression is well parenthesized or not.

*******************************************************************************/
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Stack{
  int n;
  int TOP;
  char *st;
  public:
  

  Stack(){
  n=100;
  TOP = -1;
  st = new char[n];
  }
  void push(int x){
      st[++TOP] =  x;
  }
  
  void pop(){
      if(TOP==-1) std::cout << "Stack is empty!!" << std::endl;
      
      else
      TOP--;
  }
  
  char top(){
    if(TOP==-1) {std::cout << "Stack is empty!!" << std::endl;
    return '0';}
     return st[TOP];
  }
  
  bool isempty(){
      if(TOP==-1) return true;
      return false;
  }
};

class check_parenthesis:public Stack{
    string s;
    Stack st;
    public:
    check_parenthesis(){
        
    }
    // int precendence(char c){
    //     if(c=='^') return 3;
    //     else if(c=='*' || c=='/') return 2;
    //     else if(c=='+' || c=='-') return 2;
    //     return -1;

    // }
    bool check_valid(string s){
        this->s = s;
        string ans;
        for(int i=0;i<s.size();i++){
            if(s[i]=='(' || s[i]=='{' || s[i]=='[') st.push(s[i]);
            else{
                if(s[i]==']' && st.top()=='[') st.pop();
                else if(s[i]==')' && st.top()=='(') st.pop();
                else if(s[i]=='}' && st.top()=='{') st.pop();
                else continue;
            }
        }
        return st.isempty();
    }


};

int main()
{   
    Stack st;
    //stack pushing operation
    st.push('c');

    //retriving the top element
    cout<<st.top()<<"\n";

    // deleting the top element
    st.pop();
    cout<<st.top()<<"\n";

    // checking if the stack is empty or not
    cout<<st.isempty();
    
    check_parenthesis ch;
    char choice;
    do{
        
    
    string s ;
    cout<<"\nEnter string which you want to check is valid parenthesis or not: ";
    cin>>s;
    if(ch.check_valid(s)) cout<<"\nValid\n";
    else cout<<"\nNot valid!";
    cout<<"\nEnter y or n";
    cin>>choice;
    }
    while(choice!='n');
    return 0;
}
