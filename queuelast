/*
A double-ended queue (deque) is a linear list in which additions and deletions may be
made at either end. Obtain a data representation mapping a deque into a one-
dimensional array. Write C++ program to simulate deque with functions to add and
delete elements from either end of the deque.

*/
#include <iostream>
using namespace std;


template<typename T>
class Deque{
    private:

    struct node{
        T data;
        node* next;
        node* prev;
    node(T val){
        data = val;next = nullptr;
    }
    };
    

    public:
    node* front;
    node* rear;
    int size;

    Deque(){
        size = 20;
        front = rear = nullptr;
    }

    ~Deque(){
        while(!isEmpty())
        pop_front();
    }

    bool isEmpty(){
        if(front==nullptr) return true;
        return false;
    }

    void push_front(T val){
        node* n = new node(val);
        if(isEmpty())
        front = rear = n;

        else{

            n->next = front;
            front->prev = n;
            front = n;
        }
    }

    void push_back(T val){
        node* n = new node(val);
        if(isEmpty())
        front = rear = n;

        else{
            rear->next = n;
            n->prev = rear;
            rear = n;
        }
    }

    void pop_front(){
        if(isEmpty()) throw runtime_error("\nEmpty deque!!!");
        node* t = front;
        front = front->next;
        if(front != nullptr) front->prev = nullptr;
        delete t;
    }

    T get_front(){
        if(isEmpty()) throw runtime_error("\nEmpty deque!!!");
        return front->data;
    }
    
    T get_back(){
        if(isEmpty()) throw runtime_error("\nEmpty deque!!!");

        return rear->data;
    }
};

int main(){
    Deque<int> dq;
    dq.push_back(20);
    dq.push_front(10);
    dq.push_front(30);
    dq.push_back(100);
    dq.push_back(150);

    dq.pop_front();
    cout<<"Element at back is: ";
    cout<<dq.get_back();
    cout<<"\nElement at front is: ";
    cout<<dq.get_front();

}
